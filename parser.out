Grammar:

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statement -> if_stmt
Rule 5     statement -> cat_stmt
Rule 6     statement -> print_stmt
Rule 7     statement -> assign
Rule 8     assign -> ID ATRIB expr
Rule 9     expr -> ID
Rule 10    expr -> STRING
Rule 11    expr -> NUMBER
Rule 12    print_stmt -> PRINT ( expr )
Rule 13    cat_stmt -> CAT ( expr )
Rule 14    if_stmt -> IF ( condition ) { statements }
Rule 15    condition -> expr NE expr
Rule 16    condition -> expr EQ expr
Rule 17    condition -> expr LE expr
Rule 18    condition -> expr GE expr
Rule 19    condition -> expr LT expr
Rule 20    condition -> expr GT expr

Terminals, with rules where they appear:

(                    : 12 13 14
)                    : 12 13 14
ATRIB                : 8
CAT                  : 13
EQ                   : 16
GE                   : 18
GT                   : 20
ID                   : 8 9
IF                   : 14
LE                   : 17
LT                   : 19
NE                   : 15
NUMBER               : 11
PRINT                : 12
STRING               : 10
error                : 
{                    : 14
}                    : 14

Nonterminals, with rules where they appear:

assign               : 7
cat_stmt             : 5
condition            : 14
expr                 : 8 12 13 15 15 16 16 17 17 18 18 19 19 20 20
if_stmt              : 4
print_stmt           : 6
program              : 0
statement            : 2 3
statements           : 1 3 14


state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . if_stmt
    (5) statement -> . cat_stmt
    (6) statement -> . print_stmt
    (7) statement -> . assign
    (14) if_stmt -> . IF ( condition ) { statements }
    (13) cat_stmt -> . CAT ( expr )
    (12) print_stmt -> . PRINT ( expr )
    (8) assign -> . ID ATRIB expr
    IF              shift and go to state 8
    CAT             shift and go to state 9
    PRINT           shift and go to state 10
    ID              shift and go to state 11

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    if_stmt                        shift and go to state 4
    cat_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    assign                         shift and go to state 7

state 1

    (0) S' -> program .


state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (4) statement -> . if_stmt
    (5) statement -> . cat_stmt
    (6) statement -> . print_stmt
    (7) statement -> . assign
    (14) if_stmt -> . IF ( condition ) { statements }
    (13) cat_stmt -> . CAT ( expr )
    (12) print_stmt -> . PRINT ( expr )
    (8) assign -> . ID ATRIB expr
    $end            reduce using rule 1 (program -> statements .)
    IF              shift and go to state 8
    CAT             shift and go to state 9
    PRINT           shift and go to state 10
    ID              shift and go to state 11

    statement                      shift and go to state 12
    if_stmt                        shift and go to state 4
    cat_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    assign                         shift and go to state 7

state 3

    (2) statements -> statement .
    IF              reduce using rule 2 (statements -> statement .)
    CAT             reduce using rule 2 (statements -> statement .)
    PRINT           reduce using rule 2 (statements -> statement .)
    ID              reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    }               reduce using rule 2 (statements -> statement .)


state 4

    (4) statement -> if_stmt .
    IF              reduce using rule 4 (statement -> if_stmt .)
    CAT             reduce using rule 4 (statement -> if_stmt .)
    PRINT           reduce using rule 4 (statement -> if_stmt .)
    ID              reduce using rule 4 (statement -> if_stmt .)
    $end            reduce using rule 4 (statement -> if_stmt .)
    }               reduce using rule 4 (statement -> if_stmt .)


state 5

    (5) statement -> cat_stmt .
    IF              reduce using rule 5 (statement -> cat_stmt .)
    CAT             reduce using rule 5 (statement -> cat_stmt .)
    PRINT           reduce using rule 5 (statement -> cat_stmt .)
    ID              reduce using rule 5 (statement -> cat_stmt .)
    $end            reduce using rule 5 (statement -> cat_stmt .)
    }               reduce using rule 5 (statement -> cat_stmt .)


state 6

    (6) statement -> print_stmt .
    IF              reduce using rule 6 (statement -> print_stmt .)
    CAT             reduce using rule 6 (statement -> print_stmt .)
    PRINT           reduce using rule 6 (statement -> print_stmt .)
    ID              reduce using rule 6 (statement -> print_stmt .)
    $end            reduce using rule 6 (statement -> print_stmt .)
    }               reduce using rule 6 (statement -> print_stmt .)


state 7

    (7) statement -> assign .
    IF              reduce using rule 7 (statement -> assign .)
    CAT             reduce using rule 7 (statement -> assign .)
    PRINT           reduce using rule 7 (statement -> assign .)
    ID              reduce using rule 7 (statement -> assign .)
    $end            reduce using rule 7 (statement -> assign .)
    }               reduce using rule 7 (statement -> assign .)


state 8

    (14) if_stmt -> IF . ( condition ) { statements }
    (               shift and go to state 13


state 9

    (13) cat_stmt -> CAT . ( expr )
    (               shift and go to state 14


state 10

    (12) print_stmt -> PRINT . ( expr )
    (               shift and go to state 15


state 11

    (8) assign -> ID . ATRIB expr
    ATRIB           shift and go to state 16


state 12

    (3) statements -> statements statement .
    IF              reduce using rule 3 (statements -> statements statement .)
    CAT             reduce using rule 3 (statements -> statements statement .)
    PRINT           reduce using rule 3 (statements -> statements statement .)
    ID              reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    }               reduce using rule 3 (statements -> statements statement .)


state 13

    (14) if_stmt -> IF ( . condition ) { statements }
    (15) condition -> . expr NE expr
    (16) condition -> . expr EQ expr
    (17) condition -> . expr LE expr
    (18) condition -> . expr GE expr
    (19) condition -> . expr LT expr
    (20) condition -> . expr GT expr
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    condition                      shift and go to state 17
    expr                           shift and go to state 18

state 14

    (13) cat_stmt -> CAT ( . expr )
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    expr                           shift and go to state 22

state 15

    (12) print_stmt -> PRINT ( . expr )
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    expr                           shift and go to state 23

state 16

    (8) assign -> ID ATRIB . expr
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    expr                           shift and go to state 24

state 17

    (14) if_stmt -> IF ( condition . ) { statements }
    )               shift and go to state 25


state 18

    (15) condition -> expr . NE expr
    (16) condition -> expr . EQ expr
    (17) condition -> expr . LE expr
    (18) condition -> expr . GE expr
    (19) condition -> expr . LT expr
    (20) condition -> expr . GT expr
    NE              shift and go to state 26
    EQ              shift and go to state 27
    LE              shift and go to state 28
    GE              shift and go to state 29
    LT              shift and go to state 30
    GT              shift and go to state 31


state 19

    (9) expr -> ID .
    NE              reduce using rule 9 (expr -> ID .)
    EQ              reduce using rule 9 (expr -> ID .)
    LE              reduce using rule 9 (expr -> ID .)
    GE              reduce using rule 9 (expr -> ID .)
    LT              reduce using rule 9 (expr -> ID .)
    GT              reduce using rule 9 (expr -> ID .)
    )               reduce using rule 9 (expr -> ID .)
    IF              reduce using rule 9 (expr -> ID .)
    CAT             reduce using rule 9 (expr -> ID .)
    PRINT           reduce using rule 9 (expr -> ID .)
    ID              reduce using rule 9 (expr -> ID .)
    $end            reduce using rule 9 (expr -> ID .)
    }               reduce using rule 9 (expr -> ID .)


state 20

    (10) expr -> STRING .
    NE              reduce using rule 10 (expr -> STRING .)
    EQ              reduce using rule 10 (expr -> STRING .)
    LE              reduce using rule 10 (expr -> STRING .)
    GE              reduce using rule 10 (expr -> STRING .)
    LT              reduce using rule 10 (expr -> STRING .)
    GT              reduce using rule 10 (expr -> STRING .)
    )               reduce using rule 10 (expr -> STRING .)
    IF              reduce using rule 10 (expr -> STRING .)
    CAT             reduce using rule 10 (expr -> STRING .)
    PRINT           reduce using rule 10 (expr -> STRING .)
    ID              reduce using rule 10 (expr -> STRING .)
    $end            reduce using rule 10 (expr -> STRING .)
    }               reduce using rule 10 (expr -> STRING .)


state 21

    (11) expr -> NUMBER .
    NE              reduce using rule 11 (expr -> NUMBER .)
    EQ              reduce using rule 11 (expr -> NUMBER .)
    LE              reduce using rule 11 (expr -> NUMBER .)
    GE              reduce using rule 11 (expr -> NUMBER .)
    LT              reduce using rule 11 (expr -> NUMBER .)
    GT              reduce using rule 11 (expr -> NUMBER .)
    )               reduce using rule 11 (expr -> NUMBER .)
    IF              reduce using rule 11 (expr -> NUMBER .)
    CAT             reduce using rule 11 (expr -> NUMBER .)
    PRINT           reduce using rule 11 (expr -> NUMBER .)
    ID              reduce using rule 11 (expr -> NUMBER .)
    $end            reduce using rule 11 (expr -> NUMBER .)
    }               reduce using rule 11 (expr -> NUMBER .)


state 22

    (13) cat_stmt -> CAT ( expr . )
    )               shift and go to state 32


state 23

    (12) print_stmt -> PRINT ( expr . )
    )               shift and go to state 33


state 24

    (8) assign -> ID ATRIB expr .
    IF              reduce using rule 8 (assign -> ID ATRIB expr .)
    CAT             reduce using rule 8 (assign -> ID ATRIB expr .)
    PRINT           reduce using rule 8 (assign -> ID ATRIB expr .)
    ID              reduce using rule 8 (assign -> ID ATRIB expr .)
    $end            reduce using rule 8 (assign -> ID ATRIB expr .)
    }               reduce using rule 8 (assign -> ID ATRIB expr .)


state 25

    (14) if_stmt -> IF ( condition ) . { statements }
    {               shift and go to state 34


state 26

    (15) condition -> expr NE . expr
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    expr                           shift and go to state 35

state 27

    (16) condition -> expr EQ . expr
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    expr                           shift and go to state 36

state 28

    (17) condition -> expr LE . expr
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    expr                           shift and go to state 37

state 29

    (18) condition -> expr GE . expr
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    expr                           shift and go to state 38

state 30

    (19) condition -> expr LT . expr
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    expr                           shift and go to state 39

state 31

    (20) condition -> expr GT . expr
    (9) expr -> . ID
    (10) expr -> . STRING
    (11) expr -> . NUMBER
    ID              shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 21

    expr                           shift and go to state 40

state 32

    (13) cat_stmt -> CAT ( expr ) .
    IF              reduce using rule 13 (cat_stmt -> CAT ( expr ) .)
    CAT             reduce using rule 13 (cat_stmt -> CAT ( expr ) .)
    PRINT           reduce using rule 13 (cat_stmt -> CAT ( expr ) .)
    ID              reduce using rule 13 (cat_stmt -> CAT ( expr ) .)
    $end            reduce using rule 13 (cat_stmt -> CAT ( expr ) .)
    }               reduce using rule 13 (cat_stmt -> CAT ( expr ) .)


state 33

    (12) print_stmt -> PRINT ( expr ) .
    IF              reduce using rule 12 (print_stmt -> PRINT ( expr ) .)
    CAT             reduce using rule 12 (print_stmt -> PRINT ( expr ) .)
    PRINT           reduce using rule 12 (print_stmt -> PRINT ( expr ) .)
    ID              reduce using rule 12 (print_stmt -> PRINT ( expr ) .)
    $end            reduce using rule 12 (print_stmt -> PRINT ( expr ) .)
    }               reduce using rule 12 (print_stmt -> PRINT ( expr ) .)


state 34

    (14) if_stmt -> IF ( condition ) { . statements }
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . if_stmt
    (5) statement -> . cat_stmt
    (6) statement -> . print_stmt
    (7) statement -> . assign
    (14) if_stmt -> . IF ( condition ) { statements }
    (13) cat_stmt -> . CAT ( expr )
    (12) print_stmt -> . PRINT ( expr )
    (8) assign -> . ID ATRIB expr
    IF              shift and go to state 8
    CAT             shift and go to state 9
    PRINT           shift and go to state 10
    ID              shift and go to state 11

    statements                     shift and go to state 41
    statement                      shift and go to state 3
    if_stmt                        shift and go to state 4
    cat_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    assign                         shift and go to state 7

state 35

    (15) condition -> expr NE expr .
    )               reduce using rule 15 (condition -> expr NE expr .)


state 36

    (16) condition -> expr EQ expr .
    )               reduce using rule 16 (condition -> expr EQ expr .)


state 37

    (17) condition -> expr LE expr .
    )               reduce using rule 17 (condition -> expr LE expr .)


state 38

    (18) condition -> expr GE expr .
    )               reduce using rule 18 (condition -> expr GE expr .)


state 39

    (19) condition -> expr LT expr .
    )               reduce using rule 19 (condition -> expr LT expr .)


state 40

    (20) condition -> expr GT expr .
    )               reduce using rule 20 (condition -> expr GT expr .)


state 41

    (14) if_stmt -> IF ( condition ) { statements . }
    (3) statements -> statements . statement
    (4) statement -> . if_stmt
    (5) statement -> . cat_stmt
    (6) statement -> . print_stmt
    (7) statement -> . assign
    (14) if_stmt -> . IF ( condition ) { statements }
    (13) cat_stmt -> . CAT ( expr )
    (12) print_stmt -> . PRINT ( expr )
    (8) assign -> . ID ATRIB expr
    }               shift and go to state 42
    IF              shift and go to state 8
    CAT             shift and go to state 9
    PRINT           shift and go to state 10
    ID              shift and go to state 11

    statement                      shift and go to state 12
    if_stmt                        shift and go to state 4
    cat_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    assign                         shift and go to state 7

state 42

    (14) if_stmt -> IF ( condition ) { statements } .
    IF              reduce using rule 14 (if_stmt -> IF ( condition ) { statements } .)
    CAT             reduce using rule 14 (if_stmt -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 14 (if_stmt -> IF ( condition ) { statements } .)
    ID              reduce using rule 14 (if_stmt -> IF ( condition ) { statements } .)
    $end            reduce using rule 14 (if_stmt -> IF ( condition ) { statements } .)
    }               reduce using rule 14 (if_stmt -> IF ( condition ) { statements } .)
